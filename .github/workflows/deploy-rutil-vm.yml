#
# deploy-rutil-vm.yml
# 도커 이미지 생성처리 Github Action
# 
# [build]
#
# 1. <버전> 값 추출 후 환경변수로 저장
# 2. Dockerfile을 가지고 docker build 진행
# 3. 성공 후, hub.docker.com 으로 배포 (ititcloud/rutil-vm:<버전>)
# 4. docker save 실행 후 도커이미지 tar 파일 생성
# 5. 아티팩트 배출
#  a. rutil-vm-*.tar: 도커이미지 tar 파일 
#  b. version.txt: <버전> 값
#
# NOTE: 
#    모든 작업이 성공적으로 진행 될 경우
#    deploy-rutil-vm.yml가 다음으로 실행
#
# [deploy]
# 
# 1. docker-image.yml 가 성공했는지 확인
# 2. rutil-vm*.tar 다운로드 
#  a. <버전> 값 추출
#  b. 환경변수 VERSION에 저장
# 3. rutil-vm-*.tar 업로드
#
# https://velog.io/@juhoon212/ERROR-GitHub-Actions%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-Docker-private-registry%EC%97%90-%EC%9B%90%EA%B2%A9-push-%EC%98%A4%EB%A5%98
#
name: "[FRONT] rutil-vm 빌드"

on:
  push:
    tags:
      - 'web-v*'  # Triggers on tags with prefix 'v'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      # Step 1: Check out the repository (if needed for your file operations)
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Docker Buildx 구성
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Connection Test
        run: |
          curl -X GET https://${{ secrets.NEXUS_DOCKER_REPO_ADDRESS }}/v2/_catalog

      - name: Register Insecure Docker Repository
        run: |
          sudo mkdir -p /etc/docker
          echo '{ "insecure-registries": ["${{ secrets.NEXUS_DOCKER_REPO_ADDRESS }}"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      # Step 3: Docker 로그인 처리
      - name: Login to Sonatype Nexus Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NEXUS_DOCKER_REPO_ADDRESS }}
          username: ${{ secrets.NEXUS_USERNAME }}
          password: ${{ secrets.NEXUS_PASSWORD }}

      # Step 4a: Tag에서 Version값 추출
      - name: Extract version number
        id: extract_version
        run: |
          VERSION=$(echo "${GITHUB_REF}" | sed -E 's|refs/tags/web-v(.*)|\1|')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      # Step 4b: Version값 확인
      - name: Identify the extracted version
        run: |
          echo "Extracted version: ${{ env.VERSION }}"

      # Step 5: Docker이미지 빌드
      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 --load -t ${{ secrets.NEXUS_DOCKER_REPO_ADDRESS }}/${{ secrets.NEXUS_USERNAME }}/rutil-vm:${{ env.VERSION }} ./front

      # Step 6: Docker 이미지 tar파일로 변환
      # - name: Save Docker image as tarball
      #  run: |
      #    docker save ${{ secrets.NEXUS_DOCKER_REPO_ADDRESS }}/${{ secrets.NEXUS_USERNAME }}/rutil-vm:${{ env.VERSION }} -o rutil-vm-${{ env.VERSION }}.tar

      # Step 6: (Github 아티팩트로) Docker이미지 tar파일 업로드
      # - name: Upload Docker image tarball as artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: rutil-artifact
      #    path: ./rutil-vm-${{ env.VERSION }}.tar

      # Step 7: hub.docker.com으로 Docker이미지 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./front
          push: true
          tags: ${{ secrets.NEXUS_DOCKER_REPO_ADDRESS }}/${{ secrets.NEXUS_USERNAME }}/rutil-vm:${{ env.VERSION }}

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     # Step 1: Check out the repository (if needed for your file operations)
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Extract 'version number'
  #       run: |
  #         VERSION=${{ needs.build.outputs.VERSION }}
  #         echo "VERSION=${VERSION}" >> $GITHUB_ENV
  #     - name: Identify 'version number' 
  #       run: |
  #         echo "Extracted version: ${{ env.VERSION }}"
  #     - name: Download artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: rutil-artifact
  #         path: .
  #     - name: Upload Artifact(s)
  #       uses: bungabear/synology_upload_action@master
  #       with:
  #         host:  ${{ secrets.SYNOLOGY_HOST }}
  #         username:  ${{ secrets.SYNOLOGY_USERNAME }}
  #         password:  ${{ secrets.SYNOLOGY_PASSWORD }}
  #         filepath: rutil-vm-${{ env.VERSION }}.tar
  #         filename:  rutil-vm-${{ env.VERSION }}.tar
  #         uploadpath: /docker
  #         overwrite: true
  #         createparent: true
